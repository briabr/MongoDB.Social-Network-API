// Require Users Model
const {Users} = require('../models');

// Set up Users Controller
const usersController = {
    
    // Create a new User
    createUsers(req, res) {
        Users.create(req.body)
        .then(dbUsersData => res.json(dbUsersData))
        .catch(err => res.status(400).json(err));
    },
    

    // Get All Users
    getAllUsers(req, res) {
        Users.find({})
        // populate users thoughts
        .populate({path: 'thoughts', select: '-__v'})
        // populate user friends
        .populate({path: 'friends', select: '-__v'})
        .select('-__v')
        .then(dbUsersData => res.json(dbUsersData))
        .catch(err => {
            console.log(err);
            res.status(500).json(err);
        });
    },
    

    // Get single user by ID
    getUsersById(req, res) {
        Users.findOne({_id: req.params.id })
        .populate({path: 'thoughts', select: '-__v'})
        .populate({path: 'friends', select: '-__v'})
        .select('-__v')
        // return if no user is found 
        .then(dbUsersData => {
            if(!dbUsersData) {
                res.status(404).json({message: 'No User with thst ID!'});
                return; 
            }
            res.json(dbUsersData)
        })
        .catch(err => {
            console.log(err);
            res.status(400).json(err)
        })
    },
    // // getSingleUser(req, res) {
    // //     User.findOne({ _id: req.params.userId })
    // //       .select('-__v')
    // //       .populate('posts')
    // //       .then((user) =>
    // //         !user
    // //           ? res.status(404).json({ message: 'No user with that ID' })
    // //           : res.json(user)
    // //       )
    // //       .catch((err) => res.status(500).json(err));
    // //   },

    // // Update a current User by ID
    // updateUsers({params, body}, res) {
    //     Users.findOneAndUpdate({_id: params.id}, body, {new: true, runValidators: true})
    //     .then(dbUsersData => {
    //         if(!dbUsersData) {
    //             res.status(404).json({message: 'No User with this particular ID!'});
    //             return;
    //         }
    //         res.json(dbUserData);
    //     })
    //     .catch(err => res.json(err))
    // },
    // // updateVideo(req, res) {
    // //     Video.findOneAndUpdate(
    // //       { _id: req.params.videoId },
    // //       { $set: req.body },
    // //       { runValidators: true, new: true }
    // //     )
    // //       .then((video) =>
    // //         !video
    // //           ? res.status(404).json({ message: 'No video with this id!' })
    // //           : res.json(video)
    // //       )
    // //       .catch((err) => {
    // //         console.log(err);
    // //         res.status(500).json(err);
    // //       });
    // //   },

    // deleteUsers({params}, res) {
    //     Users.findOneAndDelete({_id: params.id})
    //     .then(dbUsersData => {
    //         if(!dbUsersData) {
    //             res.status(404).json({message: 'No User with this particular ID!'});
    //             return;
    //         }
    //         res.json(dbUsersData);
    //     })
    //     .catch(err => res.status(400).json(err));
    // },

    // addFriend({params}, res) {
    //     Users.findOneAndUpdate({_id: params.id}, {$push: { friends: params.friendId}}, {new: true})
    //     .populate({path: 'friends', select: ('-__v')})
    //     .select('-__v')
    //     .then(dbUsersData => {
    //         if (!dbUsersData) {
    //             res.status(404).json({message: 'No User with this particular ID!'});
    //             return;
    //         }
    //     res.json(dbUsersData);
    //     })
    //     .catch(err => res.json(err));
    // },

    // // addVideoResponse(req, res) {
    // //     Video.findOneAndUpdate(
    // //       { _id: req.params.videoId },
    // //       { $addToSet: { responses: req.body } },
    // //       { runValidators: true, new: true }
    // //     )
    // //       .then((video) =>
    // //         !video
    // //           ? res.status(404).json({ message: 'No video with this id!' })
    // //           : res.json(video)
    // //       )
    // //       .catch((err) => res.status(500).json(err));
    // //   },

    // // Delete a current Friend
    // deleteFriend({ params }, res) {
    //     Users.findOneAndUpdate({_id: params.id}, {$pull: { friends: params.friendId}}, {new: true})
    //     .populate({path: 'friends', select: '-__v'})
    //     .select('-__v')
    //     .then(dbUsersData => {
    //         if(!dbUsersData) {
    //             res.status(404).json({message: 'No User with this particular ID!'});
    //             return;
    //         }
    //         res.json(dbUsersData);
    //     })
    //     .catch(err => res.status(400).json(err));
    // }
    // // removeVideoResponse(req, res) {
    // //     Video.findOneAndUpdate(
    // //       { _id: req.params.videoId },
    // //       { $pull: { reactions: { responseId: req.params.responseId } } },
    // //       { runValidators: true, new: true }
    // //     )
    // //       .then((video) =>
    // //         !video
    // //           ? res.status(404).json({ message: 'No video with this id!' })
    // //           : res.json(video)
    // //       )
    // //       .catch((err) => res.status(500).json(err));
    // //   },

};

// Export module users controller
module.exports = usersController; 